(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{513:function(n,S,t){n.exports=t.p+"assets/img/1.64c4d9d7.png"},514:function(n,S,t){n.exports=t.p+"assets/img/2.bc438fda.png"},515:function(n,S,t){n.exports=t.p+"assets/img/3.14cd45e2.png"},516:function(n,S,t){n.exports=t.p+"assets/img/4.81e14430.png"},558:function(n,S,t){"use strict";t.r(S);var a=t(7),s=Object(a.a)({},(function(){var n=this,S=n.$createElement,a=n._self._c||S;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[n._v("#")]),n._v(" 介绍")]),n._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[n._v("本书从前端开发人员的需求出发，以“流”为线索，从结构、内容到美化装饰等方面，全面且深\n入地讲解前端开发人员必须了解和掌握的大量的 CSS 知识点。同时，作者结合多年的从业经验，通过\n大量的实战案例，详尽解析 CSS 的相关知识与常见问题。作者还为本书开发了专门的配套网站，进行\n实例展示、问题答疑。\n作为一本 CSS 深度学习的书，书中介绍大量许多前端开发人员都不知道的 CSS 知识点。本书语言\n通俗易懂，内容深入浅出，并结合实战经验，更适合对 CSS 有所了解的前端开发人员阅读。通过阅读\n本书，读者会对 CSS 世界的深度和广度有一个全新的认识。")])]),a("h2",{attrs:{id:"一、概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[n._v("#")]),n._v(" 一、概述")]),n._v(" "),a("p",[n._v("要深入理解一个事物之前，最好先对其整体有个大概了解，这样才不至于蠡测管窥。如果\n把 CSS 比作一座大山，则我们对整体的认知就好比知道这座山的位置、山势、道路状况等，这\n样，当我们深入其中的时候，就不容易迷路，不会做出错误的决策。\n例如，对 CSS 这门语言特性的描述就有助于对 CSS 的整体认知。具体表现为：擅长 C++\n或者 Java 之类的程序员学习 CSS 往往没有如鱼得水的感觉，其背后的原因是，典型的计算机开\n发语言看重逻辑思维和抽象能力，但是 CSS 这门语言本身并无逻辑可言，看重的是特性间的相\n互联系和具象能力。\n具象往往以情感为纽带，无意识不自觉产生，是非常感性的一种能力，这往往是偏理性的\n程序员所不擅长的。在某些程序员眼中，CSS 属性就是干巴巴的属性，无法建立类似“人与人\n关系”这种很情感化的联系，于是学习 CSS 总是只得其形、不得其髓。\n当然，认知可以从多个角度进行。例如，接下来要介绍的 CSS“世界观”以及 CSS 的历史\n故事，可以让我们多种角度同时进行认知，对 CSS 这门语言的理解更为准确和丰满。")]),n._v(" "),a("h3",{attrs:{id:"_1-1-css-世界的-世界观"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-css-世界的-世界观"}},[n._v("#")]),n._v(" 1.1 CSS 世界的“世界观”")]),n._v(" "),a("ul",[a("li",[n._v("对于 CSS 这门语言，我学习和研究已经有 10 年之久，在点点滴滴的积累中，逐渐形成了一套完整的体系。在 CSS 这个世界中，CSS 并不是一个机械枯燥的语言，所有属性都是有血有肉、有着不同个性和身世的个体。不同的个体可以碰撞出不同的火花，激荡出异彩纷呈的故事。")])]),n._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[n._v("这里，我们不妨“脑洞大开”一下：如果把 CSS 世界拍成动漫的话，会是什么样子？\n首先，动漫名可以叫作《建筑神域》，讲述一群建筑魔法师为国家存亡惊心动魄战斗的故事。然后，出现了“Chrome 王国”的几位建筑魔法师日常训练的画面。只见名为 width\n的魔法师手持名叫选择器的法器，准确指向称为< div >的最普通的块状建筑魔法石，口中念道：“层叠天星，幻化有形，50%，变！”只听见一声清脆的“啪”，< div >魔法石宽度变成了原来的一半。然而，width 却锁眉摇头，口中喃喃念道：“1 毫秒，还不够快，还要再练，不然在和‘IE 王国’的战斗中很难占得先机！”（如图 1-1 所示）。")])]),a("p",[a("img",{attrs:{src:t(513),alt:""}})]),n._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[n._v('此时，width 突然发现前面 1 米之处有一块< span >之石，具有 class="test"的特殊标记，立即拿出法器，念道：“类名之石，test 为名，为我选择，出！”话音刚落，< span >之石蓝色荧光一闪，明眼人都能看出来，width 魔法师和< span >魔法石现在处于契约状态。width 继续念道：“层叠天星，幻化有形，50%，变！”但< span >魔法石却没有任何变化，此时 width 一拍自己的脑门，似乎明白了什么，转过头对旁边的 display 魔法师大声叫道：\n“小 D，这边这边，过来帮个忙……来呀，快点……”\n只见 display 迅速结束自己的练习，屁颠屁颠跑过来：“咋啦？”\n“此为内联之石，我无法驾驭，你帮我重塑一下。”\n“小问题！正好，魔法师技能委员会刚通过了我的一个新法术，我给你秀一秀？”\n“哟，不错啊，快让我瞅瞅！”“好嘞！”只见 display 拿出自己的法器，念道：“类名之石，test 为名，为我选择，\n出！”紧接着，“层叠天星，幻化有形，flex，变！”\n只听见一声清脆的“啪”，在两人的合作之下，< span >魔法石宽度也变化了（如图 1-2 所示）')])]),a("p",[a("img",{attrs:{src:t(514),alt:""}})]),n._v(" "),a("p",[n._v("从上面的描述可以看出，在 CSS 世界中，HTML 是魔法石，选择器就是选择法器，CSS 属性就\n是魔法师，CSS 各种属性值就是魔法师的魔法技能，浏览器就是他们所在的“王国”，“王国”会不断\n更新法律法规（版本升级），决定是否允许使用新的魔法石（HTML5 新标签新属性），是否允许新的\n魔法师入“国籍”（CSS3 新属性），或者允许魔法师使用某些新技能（CSS 新的属性值），以及是否舍\n弃某些魔法技能（如 display:run-in）；操作系统就是他们所在的世界，不同的操作系统代表不\n同的平行世界，所以，CSS 世界有这么几个比较大的平行世界，即 Windows 世界、OS X 世界以及移\n动端的 iOS 世界和 Android 世界。不同世界的浏览器王国的命运不一样，例如，在 OS X 世界中，IE\n王国是不存在的，而 Safari 王国却异常强大，但在 Windows 世界中，Safari 王国却异常落寞。\n以上这一切就构成了完整的 CSS 世界的“世界观”。\n下面回答一个很重要的问题：为何要这样认识 CSS 世界呢？\n首先，将抽象的 CSS 直接和具体的现实世界相对应，更加易于理解。试想一下，对于普通\n人，理解魔法师和魔法石是不是要比理解 CSS 代码容易得多？其次，以完整的体系来学习 CSS\n要比单纯关注属性值理解得更加深刻，可以培养从宏观层面认识与理解 CSS 的习惯。再次，这\n也方便我们记忆，枯燥的代码总是过目就忘，鲜活的角色总是印象深刻。最后，这样也可以让\n本书散发出与众不同的气质。")]),n._v(" "),a("h3",{attrs:{id:"_1-2-世界都是创造出来的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-世界都是创造出来的"}},[n._v("#")]),n._v(" 1.2 世界都是创造出来的")]),n._v(" "),a("p",[n._v("世界都是创造出来的。很自然，CSS 世界也是一点一点创造出来的。这世间上的事情只要\n发生了，都是有原因的。CSS 世界的出现也不例外。\n下面我们就来看一下 CSS 世界出现的历史。虽然我知道，有些人对这些历史可能不感兴趣，但是要想深入理解 CSS 属性的一些设计原因、表现原理还真离不开当时的历史环境。\n大家可能都听说过马云 1995 年去美国，第一次接触了互联网，在这个时间点，HTML 才\n是第一版且诞生没几年，W3C 才刚刚成立，CSS 还没出现。那时候的互联网几乎都是文字信息，\n显示一张图片都是要上天的感觉。\n大家可能没意识到，那个时候前端的发展和现在一样快，设计师要求越来越多，HTML 也\n越来越庞杂。急需要其他专门负责样式的语言，据说当时有几个样式表语言，最后是 CSS 胜出\n了，为什么呢？它的胜出靠的是“层叠”特性。\nCSS 全称是 Cascading Style Sheets，翻译成中文就是“层叠样式表”。所谓“层叠”，顾名\n思义，就是样式可以层层累加，比方说页面元素都继承了 12 像素的大小，某标题就可以设置成\n14 像素进行叠加。发现没？这种层叠策略对于样式的显示是相当的灵活。\n于是，从 1996 年 12 月 17 日 CSS1 诞生后，CSS 在样式呈现领域可谓所向披靡，没有遇到任\n何竞争对手。1998 年 5 月 12 日 CSS2 发布，推行内容和表现分离，表格（table）布局开始落寞。\n1998 年腾讯、新浪和网易成立，当时搜狐则成立 1 年不到。那个时候是门户的时代，人们\n更关注的是信息的获取，所以网站的功能主要就是信息展示，信息是什么？在那个时代，在互\n联网领域，信息就是图片和文字。换句话说，那时候的网站前端技术关心的是图片和文字的呈\n现，而 CSS2（包括 9 年之后，也就是 2007 年才出现的 CSS2.1）都是为图文展示服务的。\n我再重复一遍：CSS 世界的诞生就是为图文信息展示服务的。这句话在本书中会非常频繁\n地出现，知道这一点你就会明白很多事情。\n好，下面让我们回到本节开头的那句话—“世界都是创造出来的”！为何我要反复强调\n这句话呢？如果站在造物主的角度去思考 CSS 世界的种种表现，很多问题就会迎刃而解。\n现在给你机会当一回造物主，让你自己重新构建一个 CSS 世界，唯一的要求就是，这个世\n界要非常便于图片和文字的呈现，你会去如何构建呢？")]),n._v(" "),a("h3",{attrs:{id:"_1-3-css-完胜-svg-的武器-流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-css-完胜-svg-的武器-流"}},[n._v("#")]),n._v(" 1.3 CSS 完胜 SVG 的武器——流")]),n._v(" "),a("p",[n._v("在 2003 年 1 月，SVG 1.1 被确立为 W3C 标准。你没看错，是 2003 年。要知道，CSS 2.1\n是 2007 年才发布的。考虑到 SVG 开始火起来是最近几年，也就是差不多 10 年的时间，SVG\n都默默无闻，鲜有人问津，到底是怎么回事呢？\n很多人认为 SVG 的竞争对手是 Flash。对，是竞争对手。但是，现在看来，SVG 显然要比\nFlash 优秀很多，SVG 开放、标准，和 CSS 和 JavaScript 都能很方便地进行交互，如果单纯 SVG\n和 Flash 比，难说谁胜谁负。在我看来，造成 SVG 被冷落 10 年的原因不是别的，正是看似毫\n不相关的 CSS，SVG 是被 CSS 给打败的。\n正如上面提到的，在很长一段时间里，网站的主要功能都是图片和文字信息的展示，但是，\nSVG 的强项是图形，其文字内容的呈现实在不敢恭维。举个例子，在 CSS 中写上一段文字，这\n段文字会自然换行、多行显示，于是，可以像书本一样阅读；但是，在 SVG 中，文字要自动折\n行，感觉有点儿赶鸭子上架—强人所难。人家一看，SVG 连基本的文字排版都做不好，要 SVG\n何用？于是，SVG 被“打入冷宫”，CSS 一如既往被重用。\n但是，如今技术得到了发展，Web 呈现更加复杂和丰富多彩，图文显示仅仅是网页功能的\n一部分，于是，矢量且图形领域颇有造诣的 SVG 开始迎来了自己的第一春。\n不知大家有没有思考过这样的问题：为什么 CSS 世界的图文显示能力那么强？为什么它可\n以抑制 SVG 这么多年？\n答案就是：流！")]),n._v(" "),a("h4",{attrs:{id:"_1-3-1-何为-流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-何为-流"}},[n._v("#")]),n._v(" 1.3.1 何为“流”")]),n._v(" "),a("p",[n._v("和 CSS 有过亲密接触的人一定听过“文档流”这个概念，我个人总是习惯把“文档”二字\n去掉，直接称为“流”（纯粹个人爱好，因为够简洁）。听过它的人很多，但是，深入思考过“何\n为流？”这个问题的人怕是就没这么多了。\n那究竟 CSS 世界中的“流”指的是什么呢？“流”实际上是 CSS 世界中的一种基本的定\n位和布局机制，可以理解为现实世界的一套物理规则，“流”跟现实世界的“水流”有异曲同工\n的表现。\n现实世界中，如果我们让水流入一个容器，水面一定是平整的；我们在水里面放入物体，\n如普通的木头，此时水位就会上升，木头多半浮在水面上，但只露出一点点头，如图 1-3 所示。\n这些现象我们都会认为是理所当然的，因为这就是我们从小接触的一套物理规则。我们知道这\n套规则，就可以理解现象，并且预知现象。例如，水量超过容器的容积很多，我们就可以预测\n到水会溢出来。\n感谢物理学，它让我们理解 CSS 世界的“流”就轻松多了。CSS 世界的“流”似乎就是按\n照物理世界的“水流”创造的。\nCSS世界构建的基石是HTML，而HTML最具代表的两个基石< div >和< span >正好是CSS\n世界中块级元素和内联级元素的代表，它们对应的正是图 1-3 所示的盛水容器中的水和木头，\n其特性表现也正如现实世界的水和木头，如图 1-4 所示。\n"),a("img",{attrs:{src:t(515),alt:""}})]),n._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[n._v("所以，所谓“流”，就是 CSS 世界中引导元素排列和定位的一条看不见的“水流”。")])]),a("h4",{attrs:{id:"_1-3-2-流是如何影响整个-css-世界的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-流是如何影响整个-css-世界的"}},[n._v("#")]),n._v(" 1.3.2 流是如何影响整个 CSS 世界的")]),n._v(" "),a("p",[n._v("在 CSS2.1 时代，我们直接称 CSS 为“流的世界”真是一点儿也不为过，整个 CSS 世界几\n乎就是围绕“流”来建立的，那么流是如何影响整个 CSS 世界的呢？\n（1）擒贼先擒王。因为 CSS 世界的基石是 HTML，所以只要让 HTML 默认的表现符合“流”，\n那么整个 CSS 世界就可以被“流”统治，而事实就是如此！\n（2）特殊布局与流的破坏。如果全部都是以默认的“流”来渲染，我们只能实现类似 W3C\n那样的文档网页，但是，实际的网页是有很多复杂的布局的，怎么办？可以通过破坏“流”来\n实现特殊布局。实际上，还是和“流”打交道。\n（3）流向的改变。默认的流向是“一江春水向东流”，以及“飞流直下三千尺”。然而，这\n种流向我们是可以改变的，可以让 CSS 的展现更为丰富。因此，“文档流从左往右自上而下”\n这种说法是不严谨的，大家一定要纠正过来。\n好了，下面我想反问大家：如果你是造物主，你会想到设计“流”这套机制来实现强大的\n图文排列功能吗？\n好好想一想……是不是觉得目前 CSS 的设计还是很有智慧的？如果你来重新设计 CSS，实\n现图文排列，你是否还有其他的设计思路，比方说“亲缘机制”之类？\n适当地反问这些问题，通过逆向思维，会让我们对 CSS 世界有另外一个角度的认识。")]),n._v(" "),a("h4",{attrs:{id:"_1-3-3-什么是流体布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-什么是流体布局"}},[n._v("#")]),n._v(" 1.3.3 什么是流体布局")]),n._v(" "),a("p",[n._v("所谓“流体布局”，指的是利用元素“流”的特性实现的各类布局效果。因为“流”本身\n具有自适应特性，所以“流体布局”往往都是具有自适应性的。但是，“流体布局”并不等同于\n“自适应布局”。“自适应布局”是对凡是具有自适应特性的一类布局的统称，“流体布局”要狭\n窄得多。例如，表格布局也可以设置为 100%自适应，但表格和“流”不是一路的，并不属于“流\n体布局”。\nCSS 中最常用的魔法石，也就是最常使用的 HTML 标签，是< div>，而< div>是典型的\n具有“流”特性的元素，因此，曾经风靡的“div+CSS 布局”，实际上指的就是这里的“流体\n布局”。")]),n._v(" "),a("h3",{attrs:{id:"_1-4-css-世界的开启从-ie8-开始"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-css-世界的开启从-ie8-开始"}},[n._v("#")]),n._v(" 1.4 CSS 世界的开启从 IE8 开始")]),n._v(" "),a("p",[n._v("本书书名为《CSS 世界》，这里的“世界”特指的是 CSS2.1 的世界，并不包括 CSS3，CSS3\n的世界更为庞杂和宏大，但 CSS2.1 的世界已经足够我们畅游很多年了。现在前端技术发展迅猛，\n加上氛围略显浮躁，有必要让广大前端开发人员静下心来认识 CSS2.1 的世界，否则面对 CSS3\n的真正到来，只能是浅水游弋、搬砖打杂。\n对 CSS2.1 的全面支持是从微软公司的 IE8 开始的，因此，本书中几乎所有特性、行为表现\n都是针对 IE8 以上浏览器的。")]),n._v(" "),a("h3",{attrs:{id:"_1-5-table-自己的世界"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-table-自己的世界"}},[n._v("#")]),n._v(" 1.5 table 自己的世界")]),n._v(" "),a("p",[n._v("如果我没记错的话，< table>比 CSS 还要老，也就是 CSS 正式诞生之前，< table>就已\n经出现了。前面提到了“流影响了整个 CSS 世界”，其中并不包括< table>。< table>有着自\n己的世界，“流”的特性对< table>并不适用，一些 CSS 属性的表现，如单元格的\nvertical-align，也和普通的元素不一样。\n虽然 CSS2.1 加强了和< table>的联系，如对 table 类别的 display 属性值的支持等，\n但是本书并不会对< table>进行专门的介绍，因为毕竟不是同一个世界的。\n1.6 CSS 新世界——CSS3\n时代在变迁，科技在发展，人们对互联网的需求也在变化，以前的以图文展示为主的门户\n网站已经无法满足用户的需求。技术总是随着需求发展的，正如 10 年前的图文展示需求缔造了\nCSS 世界一样，如今的移动互联网以及硬件发展也带动 CSS 进入了新的世界。\n（1）布局更为丰富。 • 移动端的崛起，催生了 CSS3 媒介查询以及许多响应式布局特性的出现，如图片元素\n的 srcset 属性、CSS 的 object-fit 属性。\n• 弹性盒子布局（flexible box layout）终于熬出了头。\n• 格栅布局（grid layout）姗姗来迟。\n（2）视觉表现长足进步。 • 圆角、阴影和渐变让元素更有质感。\n• transform 变换让元素有更多可能。\n• filter 滤镜和混合模式让 Web 轻松变成在线的 Photoshop； • animation 让动画变得非常简单。\n上面提到的全部都是 CSS3 的新属性。因为 CSS3 的设计初衷是为了实现更丰富、更复杂\n的网页，所以基本上和“流”的关系并不大。可以说，和 CSS2 相比 CSS3 就是一个全新的世界，\n更加丰富，更加规范，更加体系化，也更加复杂。考虑到 CSS3 尚未完全成型，且自己尚未有\n足够深入的研究，无法同时驾驭太复杂的内容，因此，本书不会深入 CSS3 的知识点。")]),n._v(" "),a("h2",{attrs:{id:"二、需需提提前前了了解解的的术术语语和和概概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、需需提提前前了了解解的的术术语语和和概概念"}},[n._v("#")]),n._v(" 二、需需提提前前了了解解的的术术语语和和概概念")]),n._v(" "),a("h3",{attrs:{id:"_2-1-务必了解的-css-世界的专业术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-务必了解的-css-世界的专业术语"}},[n._v("#")]),n._v(" 2.1 务必了解的 CSS 世界的专业术语")]),n._v(" "),a("p",[n._v("尽管本书内容会用很轻松的方式表达，但还是避免不了会出现一些 CSS 领域的专业术语。\n因此，在学习技术内容之前，我们需要先了解一下 CSS 世界里的一些专业术语。\n首先，假设我们现在有如下一段常见的 CSS 代码：\n.vocabulary {\nheight: 99px;\ncolor: transparent;\n}\n下面就针对这段代码，逐一引出其涉及的专业术语。")]),n._v(" "),a("ul",[a("li",[n._v("1．属性\n属性对应的是平常我们书面或交谈时对 CSS 的中文称谓。例如，上面示意 CSS 代码中的\nheight 和 color 就是属性。当我们聊天或者分享时说起 CSS 的时候，嘴里冒出来的都是“这\n个元素高度 99 像素”，或者“这个文字颜色透明”，对吧？这里提到的“高度”和“颜色”就是\nCSS 世界的属性，感觉有点儿像现实世界里人的姓氏。")]),n._v(" "),a("li",[n._v("2．值\n“值”大多与数字挂钩。例如，上面的 99px 就是典型的值。在 CSS 世界中，值的分类非\n常广泛，下面是一些常用的类型。\n• 整数值，如 z-index:1 中的 1，属于< integer>，同时也属于< number>。 • 数值，如 line-height:1.5 中的 1.5，属于< number>。 • 百分比值，如 padding:50%中的 50%，属于< percent>。 • 长度值，如 99px。 • 颜色值，如#999。\n此外，还有字符串值、位置值等类型。在 CSS3 新世界中，还有角度值、频率值、时间值\n等类型，这里就不全部展示了。")]),n._v(" "),a("li",[n._v("3．关键字\n顾名思义，关键字指的是 CSS 里面很关键的单词，这里的单词特指英文单词，abc 是单词\n吗？不是，因此，如果 CSS 中出现它，一定不是关键字。上面示例 CSS 代码中的 transparent\n就是典型的关键字，还有常见的 solid、inherit 等都是关键字，其中 inherit 也称作“泛\n关键字”，所谓泛关键字，可以理解为“公交车关键字”，就是“所有 CSS 属性都可以使用的关\n键字”的意思。")]),n._v(" "),a("li",[n._v("4．变量\nCSS 中目前可以称为变量的比较有限，CSS3 中的 currentColor 就\n是变量，非常有用。不过，这属于《CSS 新世界》的内容，本书不会详细\n阐述，有兴趣的读者可以访问 http://www.zhangxinxu.com/wordpress/?p=4385\n或者扫右侧的二维码，做简单的了解。")]),n._v(" "),a("li",[n._v("5．长度单位\nCSS 中的单位有时间单位（如 s、ms），还有角度单位（如 deg、rad 等），但最常见的自\n然还是长度单位（如 px、em 等）。需要注意的是，诸如 2%后面的百分号%不是长度单位。再说\n一遍，%不是长度单位！因为 2%就是一个完整的值，就是一个整体，我想你一定认为 0.02 是\n值，没错，2%也同样是值。\n有人可能会有疑问，我就认为%是单位，有什么关系，页面还是长那样，有必要这么较真吗？\n问的很在理，如果大家平时没有看原始文档的习惯，没必要较真，知道怎么使用就好了。\n但是，如果经常去 MDN 或 W3C 看一些 CSS 技术文档，搞清楚概念，看文档的时候就不容易\n犯迷糊，就不会看不懂具体说些什么，尤其都是英文的时候。\n可能有人会有疑问，“值”那里提到的< length>，貌似和这里的“长度单位”比较暧昧啊？\n好眼力！没错，确实暧昧，但暧昧是不好的，我们必须把它们之间的关系搞清楚。一句话：\n< number> + 长度单位 = < length>\n如果继续细分，长度单位又可以分为相对长度单位和绝对长度单位。\n（1）相对长度单位。相对长度单位又分为相对字体长度单位和相对视区长度单位。\n• 相对字体长度单位，如 em 和 ex，还有 CSS3 新世界的 rem 和 ch（字符 0 的宽度）。 • 相对视区长度单位，如 vh、vw、vmin 和 vmax。 （2）绝对长度单位：最常见的就是 px，还有 pt、cm、mm、pc 等了解一下就可以，在我\n看来，它们实用性近乎零，至少我这么多年一次都没用过。")]),n._v(" "),a("li",[n._v("6．功能符\n值以函数的形式指定（就是被括号括起来的那种），主要用来表示颜色（rgba 和 hsla）、\n背景图片地址（url）、元素属性值、计算（calc）和过渡效果等，如 rgba(0,0,0,.5)、\nurl('css-world.png')、attr('href')和 scale(-1)。")]),n._v(" "),a("li",[n._v("7．属性值\n属性冒号后面的所有内容统一称为属性值。例如，1px solid rgb(0,0,0)就可以称为\n属性值，它是由“值+关键字+功能符”构成的。属性值也可以由单一内容构成。例如，z-index:1\n的 1 也是属性值。")]),n._v(" "),a("li",[n._v("8．声明\n属性名加上属性值就是声明，例如：\ncolor: transparent;")]),n._v(" "),a("li",[n._v("9．声明块\n声明块是花括号（{}）包裹的一系列声明，例如：\n{\nheight: 99px;\ncolor: transparent;\n}")]),n._v(" "),a("li",[n._v("10．规则或规则集\n出现了选择器，而且后面还跟着声明块，比如本小节一开始的那个例子，就是一个规则集：\n.vocabulary {\nheight: 99px;\ncolor: transparent;\n}")]),n._v(" "),a("li",[n._v('11．选择器\n选择器是用来瞄准目标元素的东西，例如，上面的.vocabulary 就是一个选择器。\n• 类选择器：指以“.”这个点号开头的选择器。很多元素可以应用同一个类选择器。“类”，\n天生就是被公用的命。\n• ID 选择器：“#”打头，权重相当高。ID 一般指向唯一元素。但是，在 CSS 中，ID\n样式出现在多个不同的元素上并不会只渲染第一个，而是雨露均沾。但显然不推荐\n这么做。\n• 属性选择器：指含有[]的选择器，形如[title]{}、[title= "css-world"]{}、\n[title~="css-world"]{}、[title^= "css-world"]{}和[title$="cssworld"]{}等。\n• 伪类选择器：一般指前面有个英文冒号（:）的选择器，如:first-child 或:lastchild 等。\n• 伪元素选择器：就是有连续两个冒号的选择器，如::first-line::firstletter、::before 和::after。')]),n._v(" "),a("li",[n._v("12．关系选择器\n关系选择器是指根据与其他元素的关系选择元素的选择器，常见的符号有空格、>、~，还\n有+等，这些都是非常常用的选择器。\n后代选择器：选择所有合乎规则的后代元素。空格连接。\n• 相邻后代选择器：仅仅选择合乎规则的儿子元素，孙子、重孙元素忽略，因此又称“子\n选择器”。>连接。适用于 IE7 以上版本。\n• 兄弟选择器：选择当前元素后面的所有合乎规则的兄弟元素。~连接。适用于 IE7 以上\n版本。\n• 相邻兄弟选择器：仅仅选择当前元素相邻的那个合乎规则的兄弟元素。+连接。适用于\nIE7 以上版本。")]),n._v(" "),a("li",[n._v("13．@规则\n@规则指的是以@字符开始的一些规则，像@media、@font-face、@page 或者@support，\n诸如此类。")])]),n._v(" "),a("h3",{attrs:{id:"_2-2-了解-css-世界中的-未定义行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-了解-css-世界中的-未定义行为"}},[n._v("#")]),n._v(" 2.2 了解 CSS 世界中的“未定义行为”")]),n._v(" "),a("p",[n._v('当某个浏览器中出现与其他浏览器不一样的行为或样式表现的时候，我们总会习惯把这种\n不一样的表现认为是浏览器的 bug。但在 CSS 世界，这种认识是狭隘的。\n在现实世界中，有法律来约束我们的行为，如果越界，就称为违法；同样地，在 CSS 世界\n里，有 Web 标准来约束元素的行为，如果越界，就称为 bug。但是，法律总是人制定的，世间\n万象是不可能面面俱到的，会存在法律空白；同样地，Web 应用场景千变万化，Web 标准也是\n不可能面面俱到的，也会存在规范描述以外的场景，此时，各大浏览器厂家只能根据自己的理\n解与喜好去实现，一旦个性化就会出现差异，就会遇到“火狐火狐，你怎么啦？平时表现挺好\n的，今天怎么被 IE 带坏了？”的情景。实际上，此时遇到的表现差异并不是浏览器的 bug，用\n计算机领域的专业术语描述应该是“未定义行为”（undefined behavior）。\n下面我们来看一个“未定义行为”的例子。\nCSS 世界中有很多伪类，其中一个比较常用的就是:active，在 IE8 及以上版本的浏览器行为\n表现非常统一，支持非焦点元素①，鼠标按下，执行:active 伪类对应的 CSS 样式，鼠标抬起还原。\n通用情况下，:active 的表现都是符合预期的，但是，当遭遇其他一些处理的时候，事情\n就会变得不一样，具体指什么处理呢？\n假设我们现在有一个< a>标签模拟的按钮，CSS 如下：\na:active { background-color: red; }\n假设此按钮的 DOM 对象变量名为 button，JavaScript 代码如下：\nbutton.addEventListener("mousedown", function(event) {\n// 此处省略 N 行\n① 像< a >、< button>这样的元素，当我们使用键盘进行 Tab 键切换的时候，是可以被 focus 的，表现为虚框或\n者外发光，这类元素称为“焦点元素”；非焦点元素指没有设置 tabindex 属性的< div>、< span>等普通元\n素。在 IE6/IE7 浏览器下，非焦点元素对:active 置若罔闻。')]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("event.preventDefault(); \n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br")])]),a("p",[n._v("也就是鼠标按下的时候，阻止按钮的默认行为，这样设置可以让拖动效果更流畅。\n看似平淡无奇的一段代码，最后却发生了意想不到的情况：Firefox 浏览器的:active 阵\n亡了，鼠标按下去没有 UI 变化，按钮背景没有变红！其他所有浏览器，如 IE 和 Chrome 浏览\n器，:active 正常变红，符合预期。\n眼见为实，手动输入 http://demo.cssworld.cn/2/2-1.php 或者扫下面的二维码。图 2-1 左图所\n示为目标效果，右图所示是 Firefox 浏览器中的效果。\n"),a("img",{attrs:{src:t(516),alt:""}}),n._v("\n这里，Firefox 和 IE/Chrome 浏览器表现不一样，这是 Firefox 浏览器的 bug 吗？这可不是\nbug，而是因为规范上并没有对这种场景的具体描述，所以 Firefox 认为:active 发生在\nmousedown 事件之后，你也不能说它什么，对吧？\n像这种规范顾及不到的细枝末节的实现，就称为“未定义行为”。")])])}),[],!1,null,null,null);S.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{563:function(s,a,n){"use strict";n.r(a);var e=n(7),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("p",[s._v("Python由荷兰数学和计算机科学研究学会的Guido van Rossum 于1990 年代初设计，作为一门叫做ABC语言的替代品。 Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言， 随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。")]),s._v(" "),n("p",[s._v("Python解释器易于扩展，可以使用C或C++（或者其他可以通过C调用的语言）扩展新的功能和数据类型。 Python 也可用于可定制化软件中的扩展程序语言。Python丰富的标准库，提供了适用于各个主要系统平台的源码或机器码。")])]),n("h2",{attrs:{id:"一、python基础数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、python基础数据类型"}},[s._v("#")]),s._v(" 一、Python基础数据类型")]),s._v(" "),n("h3",{attrs:{id:"_1-1-整数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-整数"}},[s._v("#")]),s._v(" 1.1 整数")]),s._v(" "),n("p",[s._v("整数和我们生活中定义的整数是一个概念，例如：1,2,3,10,100,1000,-1000 等等，都是整数，Python可以处理任意大小的整数。")]),s._v(" "),n("p",[s._v("对于整数，除了生活中常用的十进制以外，计算机由于使用二进制，所以，在计算机中也常用二进制或者十六进制表示整数。相比十进制数，在Python中使用以下方式表示二进制数和十六进制数。")]),s._v(" "),n("p",[s._v("二进制数只使用数字0、1表示，在Python中，二进制整数使用前缀0b表示，比如：0b0110，0b1100。")]),s._v(" "),n("p",[s._v("十六进制数除了0~9十个数字以外，还使用a、b、c、d、e、f，在Python中，十六进制使用前缀0x，比如：0x12ef，0xde2431af。")]),s._v(" "),n("p",[s._v("十进制数、二进制数和十六进制数之间是可以相互转换的，如果感兴趣的同学，可以学习《编程必备基础知识》了解更多转换的细节。")]),s._v(" "),n("h3",{attrs:{id:"_1-2-浮点数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-浮点数"}},[s._v("#")]),s._v(" 1.2 浮点数")]),s._v(" "),n("p",[s._v("浮点数对应我们生活的是小数，例如：0.1,0.5, 12.34, 3.1415926等，都是浮点数。")]),s._v(" "),n("p",[s._v("为什么小数在计算机领域被称为浮点数呢？这是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的（浮动的），比如，1.23x10^9和12.3x10^8是相等的，因此称为浮点数。")]),s._v(" "),n("p",[s._v("浮点数可以用数学写法，如1.23，3.14，-9.01。但是对于很大或很小的浮点数，就必须用科学计数法表示，在Python中，把10用e替代，比如：1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，同学可以自行举出更多的例子。")]),s._v(" "),n("p",[s._v("这里有必要提醒一点就是，整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的，而浮点数运算则可能会有四舍五入的误差，如何检验，可以在Python终端中输入以下内容0.1 + 0.2，看看可以得到你期望的结果0.3吗？真实结果可能让你失望了。")]),s._v(" "),n("p",[s._v("同样的，这里涉及的原理同学也可以学习上面提到的课程进行进一步原理层面的理解。")]),s._v(" "),n("h3",{attrs:{id:"_1-3-字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-字符串"}},[s._v("#")]),s._v(" 1.3 字符串")]),s._v(" "),n("p",[s._v("字符串对应生活中的就是非数字类型的内容，比如一个句子，一段话，在Python中就是字符串，在Python中，字符串是以''或\"\"括起来的任意文本，比如'abc'，\"xyz\"等等。请注意，''或\"\"本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字符。")]),s._v(" "),n("p",[s._v("比如之前练习过的第一个Python程序：print('Hello World')，其中的Hello World就是字符串。")]),s._v(" "),n("h3",{attrs:{id:"_1-4-布尔值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-布尔值"}},[s._v("#")]),s._v(" 1.4 布尔值")]),s._v(" "),n("p",[s._v("布尔值对应于生活中的就是对和错，在计算机的世界里，大部分判断都是非错则对的，布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写，不需要使用字符串符号括起来），也可以通过布尔运算计算出来。")]),s._v(" "),n("p",[s._v("布尔值可以用and、or和not运算（注意and,or,not都是Python语言本身的关键字）。")]),s._v(" "),n("p",[s._v("and运算是与运算，只有所有都为 True，and运算结果才是 True。")]),s._v(" "),n("p",[s._v("or运算是或运算，只要其中有一个为 True，or 运算结果就是 True。")]),s._v(" "),n("p",[s._v("not运算是非运算，它是一个单目运算符，把 True 变成 False，False 变成 True。")]),s._v(" "),n("h3",{attrs:{id:"_1-5-空值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-空值"}},[s._v("#")]),s._v(" 1.5 空值")]),s._v(" "),n("p",[s._v("空值是Python里一个特殊的值，用None表示。")]),s._v(" "),n("p",[s._v("注意，None和0是不一样的，None不能理解为0，因为0是有意义的，比如我有0个苹果表示我没有苹果，0表达的是数值0的意思，而不能表示为我有None个苹果，None是一个特殊的空值。")]),s._v(" "),n("h2",{attrs:{id:"二、python定义变量的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、python定义变量的方法"}},[s._v("#")]),s._v(" 二、Python定义变量的方法")]),s._v(" "),n("h3",{attrs:{id:"_2-1-什么是变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是变量"}},[s._v("#")]),s._v(" 2.1 什么是变量")]),s._v(" "),n("p",[s._v("在Python中，变量的概念基本上和初中代数的方程变量是一致的。例如，对于方程式 y=x*x ，x就是变量。当x=2时，计算结果是4，当x=5时，计算结果是25。")]),s._v(" "),n("h3",{attrs:{id:"_2-1-合法的变量名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-合法的变量名"}},[s._v("#")]),s._v(" 2.1 合法的变量名")]),s._v(" "),n("p",[s._v("只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型（字符串、布尔值、空值、字典等）。在Python中，定义一个变量需要遵循一定的约束，否则，Python可能识别不出它是一个变量。")]),s._v(" "),n("p",[s._v("变量名由大小写英文字母、数字和下划线_组成\n变量不能用数字开头\n变量尽量不要和Python关键字重合（比如前面学习过的：and、or、not，否则可能导致Python原有关键字发挥不出作用）\n以下这些变量的定义都是合法的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("num, count, _none, min_value\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("他们都满足上面的三个条件。")]),s._v(" "),n("p",[s._v("以下这些变量的定义都是不合法的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1num, 666, 1_cd, and\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"_2-1-定义变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-定义变量"}},[s._v("#")]),s._v(" 2.1 定义变量")]),s._v(" "),n("p",[s._v("定义变量的方式很简单，通过变量名 = 数据，即可定义一个变量。\n举个例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a = 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("在这个例子里面，a就是变量，它的值是一个整数1。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("hello = 'Hello'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("在这个例子里面，hello就是变量，它的值是一个字符串'Hello'。\n在Python里面，一个变量可以先后存储多种不同类型的数据。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a = 1 # 这个时候a存储的是整数类型\nprint(a)\na = 'ABC' # 这个时候a存储的是字符串类型\nprint(a)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("这是Python这类语言特有的特性，我们称之为动态语言，与之对应的是静态语言，Python、Javascript等等都是动态语言，Java、C、C++等等属于静态语言。")]),s._v(" "),n("h2",{attrs:{id:"三、python的整数与浮点数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、python的整数与浮点数"}},[s._v("#")]),s._v(" 三、Python的整数与浮点数")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("p",[s._v("在Python中，整数和浮点数虽然属于不同的数值类型，但是在运算上是可以一起运算的，这从生活经验出发，也是可以理解的。")])]),n("h3",{attrs:{id:"_3-1-四则运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-四则运算"}},[s._v("#")]),s._v(" 3.1 四则运算")]),s._v(" "),n("p",[s._v("整数、浮点数可以直接进行四则运算。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 加法\nnum1 = 10\nnum2 = 0.5\nresult = num1 + num2\nprint(result) # ==> 10.5\n# 减法\nresult = num1 - num2\nprint(result) # ==> 9.5\n# 乘法\nresult = num1 * num2\nprint(result) # ==> 5.0\n# 除法\nresult = num1 / num2\nprint(result) # ==>20.0\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("从上面可以发现一个规律，整数和浮点数运算后 ，得到的结果不管小数点后是否有值，结果都变成浮点数了，这是合理的，浮点数可以表达整数的结果，但是整数不能表达浮点数的结果。")]),s._v(" "),n("p",[n("strong",[s._v("注意：在Python2使用除法可能和Python3得到不一样的结果")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# python2\nnum1 = 10\nnum2 = 3\nresult = num1 / num2\nprint(result) # ==> 3\n# python3\nnum1 = 10\nnum2 = 3\nresult = num1 / num2\nprint(result) # ==> 3.3333333333333335\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("可以看到在python2，得到的是一个整数的结果，这是因为除数和被除数都是整数时，得到的结果也默认保存为整数了，这是非常不科学的，因此在python3，改进了这一点。")]),s._v(" "),n("h3",{attrs:{id:"_3-2-取模运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-取模运算"}},[s._v("#")]),s._v(" 3.2 取模运算")]),s._v(" "),n("p",[s._v("Python数字支持取模运算，使用百分号"),n("kbd",[s._v("%")]),s._v("表示取模。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(3 % 2) # ==> 1\nprint(33 % 10) # ==> 3\nprint(99 % 30) # ==> 9\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("恰当使用取模运算，可以判断一个数是否为偶数，当一个数对2取模结果为0时，则这个数为偶数，否则为奇数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("print(3 % 2) # ==> 1 因此3为奇数\nprint(33 % 2) # ==> 1 因此33为奇数\nprint(100 % 2) # ==> 0 因此100为偶数\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_3-3-地板除"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-地板除"}},[s._v("#")]),s._v(" 3.3 地板除")]),s._v(" "),n("p",[s._v("Python除了普通除法以外，还有一个特殊的除法被称为"),n("kbd",[s._v("地板除")]),s._v("，对于"),n("kbd",[s._v("地板除")]),s._v("，得到的结果会忽略纯小数的部分，得到整数的部分，地板除使用"),n("kbd",[s._v("//")]),s._v("进行。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("10//4 # ==> 2\n10//2.5 # ==> 4.0\n10//3 # ==> 3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_3-4-小数点位数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-小数点位数"}},[s._v("#")]),s._v(" 3.4 小数点位数")]),s._v(" "),n("p",[s._v("使用Python计算小数的时候，经常需要保留小数点后若干位，可以使用round()函数来处理，这里先了解round的调用方式，使用两个参数，第一个是需要保留小数点位数的数值，第二个是保留的位数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("num = 10 / 3\nprint(num) # ==> 3.3333333333333335\n# 使用round保留两位小数\nround(num, 2) # ==> 3.33\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"四、python的布尔类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、python的布尔类型"}},[s._v("#")]),s._v(" 四、Python的布尔类型")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("p",[s._v("布尔类型是Python的基础数据类型，布尔类型只有True和False两种值")])]),n("h3",{attrs:{id:"_4-1-与运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-与运算"}},[s._v("#")]),s._v(" 4.1 与运算")]),s._v(" "),n("p",[s._v("只有两个布尔值都为 True 时，计算结果才为 True。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("True and True # ==> True\nTrue and False # ==> False\nFalse and True # ==> False\nFalse and False # ==> False\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"_4-2-或运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-或运算"}},[s._v("#")]),s._v(" 4.2 或运算")]),s._v(" "),n("p",[s._v("只要有一个布尔值为 True，计算结果就是 True。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("True or True # ==> True\nTrue or False # ==> True\nFalse or True # ==> True\nFalse or False # ==> False\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"_4-3-非运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-非运算"}},[s._v("#")]),s._v(" 4.3 非运算")]),s._v(" "),n("p",[s._v("把True变为False，或者把False变为True：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("not True # ==> False\nnot False # ==> True\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("计算机程序是由无数的逻辑分支组成的，通过布尔运算，可以在计算机中实现条件判断，根据计算结果为True或者False，计算机可以自动执行不同的后续代码，因此布尔运算也是非常有必要的。")]),s._v(" "),n("p",[s._v("在Python中，布尔类型还可以与其他数据类型（字符串，数字等）做 and、or和not运算，请看下面的代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a = True\nprint(a and 0 or 99) # ==> 99\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("得到的计算结果不是布尔类型，而是数字99，这是为什么呢？")]),s._v(" "),n("p",[s._v("因为Python把0、空字符串和None看成False，其他数值和非空字符串都看成True，所以：")]),s._v(" "),n("p",[n("kbd",[s._v("True and 0")]),s._v("计算结果是0\n继续计算"),n("kbd",[s._v("0 or 99")]),s._v("计算结果是 99\n因此，结果是99。\n需要注意的是，not计算的优先级是高于and和or的。")]),s._v(" "),n("p",[n("kbd",[s._v("True and not False # ==> True")]),s._v("\n在上述布尔计算中，先计算"),n("kbd",[s._v("not False = True")]),s._v("，然后再计算"),n("kbd",[s._v("True and True")]),s._v("，因此得到True的结果。")]),s._v(" "),n("h3",{attrs:{id:"_4-4-短路计算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-短路计算"}},[s._v("#")]),s._v(" 4.4 短路计算")]),s._v(" "),n("ol",[n("li",[s._v("在计算 "),n("kbd",[s._v("a and b")]),s._v(" 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。")]),s._v(" "),n("li",[s._v("在计算 "),n("kbd",[s._v("a or b")]),s._v(" 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。")])]),s._v(" "),n("p",[s._v("Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。")]),s._v(" "),n("h2",{attrs:{id:"五、python的字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、python的字符串"}},[s._v("#")]),s._v(" 五、Python的字符串")]),s._v(" "),n("p",[s._v("字符串可以用' '或者\" \"括起来表示。")]),s._v(" "),n("p",[s._v("如果字符串本身包含'怎么办？比如我们要表示字符串 I'm OK ，这时，可以用\" \"括起来表示：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('"I\'m OK"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("类似的，如果字符串包含\"，我们就可以用' '括起来表示：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("'Learn \"Python\" in imooc'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果字符串既包含'又包含\"")]),s._v(" "),n("p",[s._v("这个时候，就需要对字符串中的某些特殊字符进行“转义”，Python字符串用\\进行转义。")]),s._v(" "),n("p",[s._v('要表示字符串Bob said "I\'m OK"')]),s._v(" "),n("p",[s._v("由于'和\"会引起歧义，因此，我们在它前面插入一个\\表示这是一个普通字符，不代表字符串的起始，因此，这个字符串又可以表示为")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("'Bob said \\\"I\\'m OK\\\".'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("strong",[s._v("注意：转义字符 \\不计入字符串的内容中。")])]),s._v(" "),n("p",[s._v("常用的转义字符还有：")]),s._v(" "),n("p",[n("kbd",[s._v(" \\n ")]),s._v(" 表示换行")]),s._v(" "),n("p",[n("kbd",[s._v(" \\t ")]),s._v(" 表示一个制表符")]),s._v(" "),n("p",[n("kbd",[s._v(" \\ ")]),s._v(" 表示 "),n("kbd",[s._v(" \\ ")]),s._v(" 字符本身")]),s._v(" "),n("h3",{attrs:{id:"_5-1-raw字符串与多行字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-raw字符串与多行字符串"}},[s._v("#")]),s._v(" 5.1 raw字符串与多行字符串")]),s._v(" "),n("p",[s._v("如果一个字符串包含很多需要转义的字符，对每一个字符都进行转义会很麻烦。为了避免这种情况，我们可以在字符串前面加个前缀r，表示这是一个 raw 字符串，里面的字符就不需要转义了。例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("r'\\(~_~)/ \\(~_~)/'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("但是r'...'表示法不能表示多行字符串，也不能表示包含'和 \"的字符串。")]),s._v(" "),n("p",[s._v("如果要表示多行字符串，可以用'''...'''表示：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("'''Line 1\nLine 2\nLine 3'''\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("上面这个字符串的表示方法和下面的是完全一样的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("'Line 1\\nLine 2\\nLine 3'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("还可以在多行字符串前面添加r，把这个多行字符串也变成一个raw字符串：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("r'''Python is created by \"Guido\".\nIt is free and easy to learn.\nLet's start learn Python in imooc!'''\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_5-2-字符串format"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-字符串format"}},[s._v("#")]),s._v(" 5.2 字符串format")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("p",[s._v("字符串format由两个部分组成，字符串模板和模板数据内容组成，通过大括号{}，就可以把模板数据内容嵌到字符串模板对应的位置。")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 字符串模板\ntemplate = 'Hello {}'\n# 模板数据内容\nworld = 'World'\nresult = template.format(world)\nprint(result) # ==> Hello World\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("如果模板中{}比较多，则容易错乱，那么在format的时候也可以指定模板数据内容的顺序。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 指定顺序\ntemplate = 'Hello {0}, Hello {1}, Hello {2}, Hello {3}.'\nresult = template.format('World', 'China', 'Beijing', 'imooc')\nprint(result) # ==> Hello World, Hello China, Hello Beijing, Hello imooc.\n# 调整顺序\ntemplate = 'Hello {3}, Hello {2}, Hello {1}, Hello {0}.'\nresult = template.format('World', 'China', 'Beijing', 'imooc')\nprint(result) # ==> Hello imooc, Hello Beijing, Hello China, Hello World.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("除了使用顺序，还可以指定对应的名字，使得在format过程更加清晰。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 指定{}的名字w,c,b,i\ntemplate = 'Hello {w}, Hello {c}, Hello {b}, Hello {i}.'\nworld = 'World'\nchina = 'China'\nbeijing = 'Beijing'\nimooc = 'imooc'\n# 指定名字对应的模板数据内容\nresult = template.format(w = world, c = china, b = beijing, i = imooc)\nprint(result) # ==> Hello World, Hello China, Hello Beijing, Hello imooc.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"_5-3-字符串编码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-字符串编码"}},[s._v("#")]),s._v(" 5.3 字符串编码")]),s._v(" "),n("p",[n("strong",[s._v("为什么有编码问题")])]),s._v(" "),n("p",[s._v("因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），0 - 255被用来表示大小写英文字母、数字和一些符号，这种编码方式被称为ASCII编码，比如大写字母 A 的编码是65，小写字母 z 的编码是122。\n如果要表示中文，显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。\n类似的，日文和韩文等其他语言也有这个问题。为了统一所有文字的编码，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。\nUnicode通常用两个字节表示一个字符，原有的英文编码从单字节变成双字节，只需要把高字节全部填为0就可以。")]),s._v(" "),n("p",[n("strong",[s._v("python3的编码")])]),s._v(" "),n("p",[s._v("在python3中，默认使用UTF-8 Unicode来进行编码，因此我们可以在python中输入任意形式的Unicode字符串，都不会遇到像python2中遇到的问题（在python2中，需要显式指明该字符串是Unicode字符串），如果没有了解过python2，则完全可以忽略这一点，python3提供了更加简单易懂的编码方式。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s1 = '这是中文字符串'\ns2 = 'this is an English string'\nprint(s1)\nprint(s2)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("在python3中，中文字符串和英文字符串无异。")]),s._v(" "),n("h3",{attrs:{id:"_5-4-字符串切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-字符串切片"}},[s._v("#")]),s._v(" 5.4 字符串切片")]),s._v(" "),n("p",[s._v("字符串由一个个字符组成，每一个字符都有一个唯一的位置。比如字符串'ABC'，第一个字符是A，第二个字符是B，第三个字符是C。\n因此我们可以使用位置的方式取出字符串中特定位置的字符，按照位置取字符串的方式使用中括号[]访问，这个时候可以把字符串看作是一个列表，不过需要注意的是，在程序的世界中，计数是从0开始的，使用0来表示第一个。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s = 'ABC'\na = s[0] # 第一个\nb = s[1] # 第二个\nc = s[2] # 第三个\nprint(a) # ==> A\nprint(b) # ==> B\nprint(c) # ==> C\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("有时候，我们会想获取字符串的一部分（子串），这个时候我们采取切片的方式获取，切片需要在中括号[]中填入两个数字，中间用冒号分开，表示子串的开始位置和结束位置，并且这是半闭半开区间，不包括最后的位置。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ab = s[0:2] # 取字符串s中的第一个字符到第三个字符，不包括第三个字符\nprint(ab) # ==> AB\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s = 'ABCDEFGHIJK'\nabcd = s[0:4] # 取字符串s中的第一个字符到第五个字符，不包括第五个字符\nprint(abcd) # ==> ABCD\ncdef = s[2:6] # 取字符串s中的第三个字符到第七个字符，不包括第七个字符\nprint(cdef) # ==> CDEF\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"六、python的控制流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、python的控制流程"}},[s._v("#")]),s._v(" 六、Python的控制流程")]),s._v(" "),n("h3",{attrs:{id:"_6-1-if-else-语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-if-else-语句"}},[s._v("#")]),s._v(" 6.1 if else 语句")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("score = 59\nif score < 60:\n    print('抱歉，考试不及格')\nelse:\n    print('恭喜你，考试及格')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这里，因为 score = 59 < 60，所以if的判断是True，因此就会执行print('抱歉，考试不及格')。")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("可以看到print('抱歉，考试不及格')这行代码明显比上一行代码缩进了，这是因为这行代码是if判断的一个子分支，因此需要缩进，在Python规范中，一般使用4个空格作为缩进")])]),s._v(" "),n("li",[n("p",[s._v("在if语句的最后，有一个冒号:，这是条件分支判断的格式，在最后加入冒号:，表示接下来是分支代码块")])])]),s._v(" "),n("h3",{attrs:{id:"_6-2-for循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-for循环"}},[s._v("#")]),s._v(" 6.2 for循环")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s = 'ABCD'\nfor ch in s:\n    print(ch) # 注意缩进\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("在上述代码中，ch是在for循环中定义的，意思是把字符串s中的每一个元素依次赋值给ch，然后再把ch打印出来，直到打印出字符串s的最后一个字符为止。")]),s._v(" "),n("h3",{attrs:{id:"_6-3-while循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-while循环"}},[s._v("#")]),s._v(" 6.3 while循环")]),s._v(" "),n("p",[s._v("判断while循环的条件是否为True即可，当条件为True时，即继续运行下去")]),s._v(" "),n("p",[s._v("比如计算1~100的和。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("num = 1\nsum = 0\nwhile num <= 100:\n    sum = sum + num # 注意缩进\n    num = num + 1 # 注意缩进\nprint(sum) # ==> 5050\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("用 for 循环或者 while 循环时，如果要在循环体内直接退出循环，可以使用 break 语句。continue 是可以控制循环继续下去，并跳过continue后面的逻辑")])]),s._v(" "),n("h2",{attrs:{id:"七、-python的list容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七、-python的list容器"}},[s._v("#")]),s._v(" 七、 Python的List容器")]),s._v(" "),n("p",[s._v("列表(list)是一种有序的容器，放入list中的元素，将会按照一定顺序排列。构造list的方法非常简单，使用中括号[]把需要放在容器里面的元素括起来，就定义了一个列表。")]),s._v(" "),n("p",[s._v("比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("scores = [45, 60, 75, 86, 49, 100]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("list可以放入数字、字符串等数据类型，list不对放入其中的类型进行判断，也就是说，list可以同时放入任意类型的数据")]),s._v(" "),n("h3",{attrs:{id:"_7-1-向list添加新的元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-向list添加新的元素"}},[s._v("#")]),s._v(" 7.1 向list添加新的元素")]),s._v(" "),n("ol",[n("li",[s._v("用append()方法，把新同学追加到列表的末尾：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("names = ['Alice', 'Bob', 'David', 'Ellena']\nnames.append('Candy')\nprint(names) # ==> ['Alice', 'Bob', 'David', 'Ellena', 'Candy']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("注意，append()方法总是将元素添加到list的尾部。")])]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("list的insert()方法，insert()方法和append()方法不一样，insert()方法需要两个参数，分别是需要插入的位置，以及需要插入的元素。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("names = ['Alice', 'Bob', 'David', 'Ellena']\nnames.insert(2, 'Candy')\nprint(names) # ==> ['Alice', 'Bob', 'Candy', 'David', 'Ellena']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("注意，将Candy插入到第三的位置之后，原来的名字，都将自动往后移动一位，这个时候再使用相同的索引获取后面的元素，将会得到不一样的结果")])]),s._v(" "),n("h3",{attrs:{id:"_7-2-从list删除元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-从list删除元素"}},[s._v("#")]),s._v(" 7.2 从list删除元素")]),s._v(" "),n("p",[s._v("pop()方法默认删除列表的最后一个元素，并返回。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("L = ['Alice', 'Bob', 'Candy', 'David', 'Ellena']\nname = L.pop()\nprint(name) # ==> Ellena\nprint(L) # ==> L = ['Alice', 'Bob', 'Candy', 'David']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("pop()还可以接收一个参数，指定需要删除的元素的位置。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("L = ['Alice', 'Bob', 'Candy', 'David', 'Ellena']\nname = L.pop(2)\nprint(name) # ==> Candy\nprint(L) # ==> ['Alice', 'Bob', 'David', 'Ellena']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"八、python的tuple容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八、python的tuple容器"}},[s._v("#")]),s._v(" 八、Python的tuple容器")]),s._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("p",[s._v("元组(tuple)和list一样，也是一个有序容器，在元组中，同样可以包含0个或者多个元素，并且也支持索引访问、切片等操作。定义元组的方式是使用小括号()将元组内的元素括起来。")])]),n("p",[s._v("比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("T = ('Alice', 'Bob', 'Candy', 'David', 'Ellena')\n# 通过下标的方式访问元素\nprint(T[0]) # ==> Alice\nprint(T[4]) # ==> Ellena\n# 切片\nprint(T[1:3]) # ==> ('Bob', 'Candy')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("元组数据类型可以把不是元组的容器转换为元组，比如将列表转换成元组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("L = ['Alice', 'Bob', 'Candy', 'David', 'Ellena']\nprint(L) # ==> ['Alice', 'Bob', 'Candy', 'David', 'Ellena']\nT = tuple(L)\nprint(T) # ==> ('Alice', 'Bob', 'Candy', 'David', 'Ellena')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("同样的，对于列表数据类型，也可以把元组转换成列表。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("T = ('Alice', 'Bob', 'Candy', 'David', 'Ellena')\nprint(T) # ==> ('Alice', 'Bob', 'Candy', 'David', 'Ellena')\nL = list(T)\nprint(L) # ==> ['Alice', 'Bob', 'Candy', 'David', 'Ellena']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("但是，tuple和list不一样的是，"),n("strong",[s._v("tuple是固定不变的，一旦变成tuple，tuple中的每一个元素都不可被改变，同时也不能再往tuple中添加数据，而list是可以的。")]),s._v("\n元组(tuple)的这个特性是非常重要的，在运行上tuple的性能是list的数倍。")]),s._v(" "),n("p",[s._v("由于tuple一旦定义之后便不可修改，所以在实际编程中，tuple经常用于存放固定不变的数据。\n因此在使用上，tuple提供了便捷的方法可以访问tuple中的数据。")]),s._v(" "),n("h3",{attrs:{id:"_8-1-count-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-count-方法"}},[s._v("#")]),s._v(" 8.1 count()方法")]),s._v(" "),n("p",[s._v("count()方法用来统计tuple中某个元素出现的次数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("T = (1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9)\nprint(T.count(1)) # ==> 3\nprint(T.count(5)) # ==> 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("对于不存在的元素，count方法不会报错，而是返回0，这是合理的，因为元组里面有0个不存在的元素。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("T = (1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9)\nprint(T.count(10)) # ==> 0\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_8-2-index-方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-index-方法"}},[s._v("#")]),s._v(" 8.2 index()方法")]),s._v(" "),n("p",[s._v("index()方法可以返回指定元素的下标，当一个元素多次重复出现时，则返回第一次出现的下标位置。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("T = (1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9)\nT.index(9) # ==> 10\nT.index(5) # ==> 8\nT.index(1) # ==> 0 # 多次出现，返回第一次出现的位置\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("注意，index()方法和count()方法不一样，当指定的元素不存在时，使用index()方法Python会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('T = (1, 1, 2, 2, 3, 3, 1, 3, 5, 7, 9)\nT.index(100)\n# 报错\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nValueError: tuple.index(x): x not in tuple\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_8-3-创建单个元素的tuple"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-创建单个元素的tuple"}},[s._v("#")]),s._v(" 8.3 创建单个元素的tuple")]),s._v(" "),n("p",[s._v("tuple和list一样，可以包含 0 个、1个和任意多个元素。\n包含多个元素的 tuple，前面我们已经创建过了。")]),s._v(" "),n("p",[s._v("包含 0 个元素的 tuple，也就是空tuple，直接用()表示：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("T = ()\nprint(T) # ==> ()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("接着，我们创建包含一个元素的tuple。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("T = (1)\nprint(T) # ==> 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("这和我们期望的输出有些差异，为什么包含一个元素的元组打印出来之后没有小括号，而是只有一个数字1呢？\n回顾一下前面数字的四则运算。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("result = 3 * 4 - 2\nprint(result) # ==> 10\n# 改变优先级，先运算减法\nresult = 3 * (4 - 2)\nprint(result) # ==> 6\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("可以看到，改变优先级我们是通过()来实现的，这和元组的定义有冲突，这就解释了前面只有一个元素的元组，为什么打印出来却得到一个数字的结果了。\n因为()既可以表示tuple，又可以作为括号表示运算时的优先级，结果(1)被Python解释器计算出结果 1，导致我们得到的不是tuple，而是整数 1。\n因此，要定义只有一个元素的tuple，需要在元素后面添加一个逗号,。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("T = (1, )\nprint(T) # ==> (1, )\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("而对于多个元素的tuple，则加和不加这个逗号，效果是一样的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(">>> T = (1, 2, 3,)\n>>> print(T) # ==> (1, 2, 3)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"九、-python的dict容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#九、-python的dict容器"}},[s._v("#")]),s._v(" 九、 Python的Dict容器")]),s._v(" "),n("p",[s._v("dict的定义如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d = {\n    'Alice': 45,\n    'Bob': 60,\n    'Candy': 75,\n    'David': 86,\n    'Ellena': 49\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("在定义里，我们使用花括号{}表示这是一个dict，然后key和value之间使用冒号:分割，并且每一组key:value的最后，以逗号,表示这一组的结束。\n我们也可以使用以下的方式定义一个dict。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d = dict()\nprint(d) # ==> {}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("不过这种定义方式，默认得到的是一个空dict，需要调用函数往里面添加数据")]),s._v(" "),n("h3",{attrs:{id:"_9-1-读取dict元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-读取dict元素"}},[s._v("#")]),s._v(" 9.1 读取dict元素")]),s._v(" "),n("p",[s._v("通过 d[ key ] 的形式，就可以得到对应的value。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d = {\n    'Alice': 45,\n    'Bob': 60,\n    'Candy': 75,\n    'David': 86,\n    'Ellena': 49,\n    'Gaven': 86\n}\nprint(d['Bob']) # ==> 60\nprint(d['Alice']) # ==> 45\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_9-2-添加dict元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-添加dict元素"}},[s._v("#")]),s._v(" 9.2 添加dict元素")]),s._v(" "),n("p",[s._v("使用赋值语句往里面添加元素：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d['Mimi'] = 72\nd['Dodo'] = 88\nprint(d)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("当key不存在时，往dict中添加对应的key: value元素。")]),s._v(" "),n("li",[s._v("当key存在时，会更新dict，用新的value替换原来的value。")])]),s._v(" "),n("h3",{attrs:{id:"_9-3-删除dict元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-删除dict元素"}},[s._v("#")]),s._v(" 9.3 删除dict元素")]),s._v(" "),n("p",[s._v("需要把Alice的成绩删除，可以这样写：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d = {\n    'Alice': 45,\n    'Bob': 60,\n    'Candy': 75,\n    'David': 86,\n    'Ellena': 49\n}\nprint(d) # ==> {'Alice': 45, 'Bob': 60, 'Candy': 75, 'David': 86, 'Ellena': 49}\nalice_score= d.pop('Alice')\nprint(alice_score) # ==> 45\nprint(d) # ==> {'Bob': 60, 'Candy': 75, 'David': 86, 'Ellena': 49}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("需要注意的是，pop()方法的参数是dict中的key，当key不存在时，同样会引起错误。比如在上述操作中，已经把Alice的成绩删除了，假如再次pop('Alice')，将会引发错误。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d.pop('Alice')\n# 报错\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'Alice'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"_9-4-dict的特点与方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-dict的特点与方法"}},[s._v("#")]),s._v(" 9.4 dict的特点与方法")]),s._v(" "),n("p",[n("strong",[s._v("1. 查找速度快")])]),s._v(" "),n("p",[s._v("无论dict有10个元素还是10万个元素，查找速度都一样。而list的查找速度随着元素增加而逐渐下降。")]),s._v(" "),n("p",[s._v("不过dict的查找速度快不是没有代价的，dict的缺点是占用内存大，还会浪费很多内容，list正好相反，占用内存小，但是查找速度慢。")]),s._v(" "),n("p",[n("strong",[s._v("2. key不可变")])]),s._v(" "),n("p",[s._v("对于基础数据类型，字符串、数字等，这些都是不可变的，可以作为dict的key，而对于复杂数据类型，经过前面的学习，我们知道tuple是不可变的，list是可变的，因此tuple可以作为dict的key，但是list不可以作为dict的key，否则将会报错。")]),s._v(" "),n("p",[n("strong",[s._v("3. Python遍历dict")])]),s._v(" "),n("p",[s._v("通过直接print(d)，我们打印出来的是完整的一个dict；有时候，我们需要把dict中m一定条件的元素打印出来，比如成绩超过60的，在这种情况下，我们需要则需要遍历dict（这种时候需要使用for循环），并通过条件判断把满足条件的打印出来。")]),s._v(" "),n("p",[s._v("遍历dict有两种方法")]),s._v(" "),n("p",[s._v("第一种是遍历dict的所有key，并通过key获得对应的value。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d = {\n    'Alice': 45,\n    'Bob': 60,\n    'Candy': 75,\n    'David': 86,\n    'Ellena': 49\n}\nfor key in d: # 遍历d的key\n    value = d[key]\n    if value > 60:\n        print(key, value)\n# ==> Candy 75\n# ==> David 86\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("第二种方法是通过dict提供的items()方法，items()方法会返回dict中所有的元素，每个元素包含key和value。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for key, value in d.items():\n    if value > 60:\n        print(key, value)\n# ==> Candy 75\n# ==> David 86\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("5. 获取dict的所有key")])]),s._v(" "),n("p",[s._v("dict提供keys()函数，可以返回dict中所有的key。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d = {'Alice': [50, 61, 66], 'Bob': [80, 61, 66], 'Candy': [88, 75, 90]}\nfor key in d.keys():\n    print(key)\n# ==> Alice\n# ==> Bob\n# ==> Candy\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("6. 获取dict所有的value")])]),s._v(" "),n("p",[s._v("dict提供values()函数，可以返回dict中所有的value。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d = {'Alice': [50, 61, 66], 'Bob': [80, 61, 66], 'Candy': [88, 75, 90]}\nfor key in d.values():\n    print(key)\n# ==> [50, 61, 66]\n# ==> [80, 61, 66]\n# ==> [88, 75, 90]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("7. 清除所有元素")])]),s._v(" "),n("p",[s._v("dict提供clear()函数，可以直接清除dict中所有的元素。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("d = {'Alice': [50, 61, 66], 'Bob': [80, 61, 66], 'Candy': [88, 75, 90]}\nprint(d) # ==> {'Alice': [50, 61, 66], 'Bob': [80, 61, 66], 'Candy': [88, 75, 90]}\nd.clear()\nprint(d) # ==> {}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"十、python的set容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#十、python的set容器"}},[s._v("#")]),s._v(" 十、Python的Set容器")]),s._v(" "),n("p",[s._v("set和list类似，拥有一系列元素，但是set和list不一样，set里面的元素是不允许重复的，而list里面可以包含相同的元素；set与list的另一个区别是，set里面的元素是没有顺序的。")]),s._v(" "),n("p",[s._v("创建set的方式是使用set()，并传入一个list，list的元素将会被转换成set的元素。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s = set([1, 4, 3, 2, 5])\nprint(s) # ==> set([1, 2, 3, 4, 5])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("需要注意的是，上述打印的形式类似 list， 但它不是 list，仔细看还可以发现，打印的顺序和原始 list 的顺序有可能是不同的，因为set内部存储的元素是无序的。\n另外，set不能包含重复的元素")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s = set([1, 4, 3, 2, 5, 4, 2, 3, 1])\nprint(s) # ==> set([1, 2, 3, 4, 5])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("可以看到，在传入set()的list中，包含了重复的元素，但是打印的时候，相同的元素只保留了一个，重复的元素都被去掉了，这是set的一个重要特点。")]),s._v(" "),n("p",[n("strong",[s._v("1. set提供了add()方法，我们可以使用add()方法，往set里面添加元素。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("names = ['Alice', 'Bob', 'Candy', 'David', 'Ellena']\nname_set = set(names)\nname_set.add('Gina')\nprint(name_set) # ==> set(['Gina', 'Alice', 'Candy', 'David', 'Ellena', 'Bob'])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("2. set提供了update()方法，可以一次性给set添加多个元素。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("names = ['Alice', 'Bob', 'Candy', 'David', 'Ellena']\nnew_names = ['Hally', 'Isen', 'Jenny', 'Karl']\nname_set = set(names)\nname_set.update(new_names) # ==> set(['Jenny', 'Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl'])\nprint(name_set)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("3. set提供了remove()方法允许我们删除set中的元素。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("name_set = set(['Jenny', 'Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl'])\nname_set.remove('Jenny')\nprint(name_set) # ==> set(['Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl'])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("需要注意的是，如果remove的元素不在set里面的话，那么将会引发错误。")]),s._v(" "),n("p",[n("strong",[s._v("4. 使用discard()方法删除元素")]),s._v("，")]),s._v(" "),n("p",[s._v("和remove()不同的是，当元素不存在时，使用discard()并不会引发错误，所以使用discard()是更加高效的一个方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("name_set = set(['Jenny', 'Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl'])\nname_set.discard('Jenny')\nprint(name_set) # ==> set(['Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl'])\nname_set.discard('Jenny')\nprint(name_set) # ==> set(['Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("5. 清除所有元素的方法clear()。")])]),s._v(" "),n("p",[s._v("和dict一样，set也提供了clear()方法，可以快速清除set中的所有元素。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("name_set = set(['Jenny', 'Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl'])\nname_set.discard('Jenny')\nprint(name_set) # ==> set(['Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl'])\nname_set.discard('Jenny')\nprint(name_set) # ==> set(['Ellena', 'Alice', 'Candy', 'David', 'Hally', 'Bob', 'Isen', 'Karl']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("6. 集合的子集和超集")])]),s._v(" "),n("p",[s._v("set提供方法判断两个set之间的关系，比如两个集合set，判断其中一个set是否为另外一个set的子集或者超集。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s1 = set([1, 2, 3, 4, 5])\ns2 = set([1, 2, 3, 4, 5, 6, 7, 8, 9])\n# 判断s1是否为s2的子集\ns1.issubset(s2) # ==> True\n# 判断s2是否为s1的超集\ns2.issuperset(s1) # ==> True\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("7. 判断集合是否重合")])]),s._v(" "),n("p",[s._v("有时候需要判断两个集合是否有重合的地方，如果使用传统的方法，需要使用for循环一个一个的去判断，非常麻烦，set提供isdisjoint()方法，可以快速判断两个集合是否有重合，如果有重合，返回False，否则返回True。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("s1 = set([1, 2, 3, 4, 5])\ns2 = set([1, 2, 3, 4, 5, 6, 7, 8, 9])\ns1.isdisjoint(s2) # ==> False，因为有重复元素1、2、3、4、5\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);